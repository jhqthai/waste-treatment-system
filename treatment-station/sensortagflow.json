[{"id":"7e0e17c0.e48be","type":"split","z":"9df3b382.bba0b8","name":"","splt":"\\n","x":218.49998474121094,"y":55.19999694824219,"wires":[["9024513b.511ee8"]]},{"id":"8f4b0966.3f0bd8","type":"daemon","z":"9df3b382.bba0b8","command":"sudo","args":"python -u /home/pi/sensortagcollector.py","cr":false,"redo":true,"op":"string","name":"Connect to Sensortags","x":155.1999969482422,"y":162.1999969482422,"wires":[["7e0e17c0.e48be"],[],[]]},{"id":"9024513b.511ee8","type":"function","z":"9df3b382.bba0b8","name":"JSON String to Object","func":"// reject empty messages\nif ( msg.payload.trim().length === 0 ) {\n    return null;\n}\n\n// This try/catch seems to be needed because\n// occasionally a malformed JSON string is received\n// from the python script.\n// I couldn't see anything wrong with the strings that raise\n// exceptions, but this stops the errors causing\n// irritating problems.\n// UPDATE since adding the split node and the test for\n// zero length (after trimming) above, I haven't\n// seen the json conversion fail. Leaving it here just in case\n\ntry {\n    msg.payload= JSON.parse(msg.payload.trim());\n} catch(err) {\n    node.error(\"Couldn't convert JSON to object:\"+msg.payload);\n    return null;\n}\n\n// Set the data to have come from the device's assigned name\n// The IoT output node must assert the device\n//  type (along with the login credentials for the Pi gateway)!\nmsg.deviceId = msg.payload.devicename;\n\nreturn msg;\n","outputs":1,"noerr":0,"x":402.20001220703125,"y":56.19999694824219,"wires":[["7b988b08.785704","2fddfe61.c435ca"]]},{"id":"7b988b08.785704","type":"debug","z":"9df3b382.bba0b8","name":"","active":false,"console":"false","complete":"payload","x":469.199951171875,"y":163.1999969482422,"wires":[]}]